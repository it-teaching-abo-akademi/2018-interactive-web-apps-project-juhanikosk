{"version":3,"sources":["components/CreationModal.jsx","components/Stock.jsx","components/Portfolio.jsx","App.js","serviceWorker.js","index.js"],"names":["CreationModal","state","values","id","value","this","setState","_this2","Object","keys","length","props","inputs","some","inp","validate","_this3","react_default","a","createElement","className","tabIndex","role","title","type","onClick","close","aria-hidden","map","key","onChange","e","setValue","target","placeholder","helpText","onCreate","disabled","canSubmit","submitName","Component","Stock","selected","stock","symbol","concat","unitValue","parseFloat","toFixed","amount","selectStock","React","Portfolio","API_URL","API_KEY","showStockCreationModal","unitValues","stocks","forEach","fetchStockValue","stockName","fetch","then","result","json","resultData","_this4","name","i","Stock_Stock","deletePortfolio","deleteSelectedStocks","CreationModal_CreationModal","val","isNaN","parseInt","addStock","App","portfolios","showCreationModal","selectedStocks","portfolioId","_this","push","portId","filter","s","port","p","localStorage","setItem","JSON","stringify","data","getItem","jsonData","parse","stockId","portfolio","getNewPortolioId","toConsumableArray","alert","getNewStockId","index","Portfolio_Portfolio","addStockToPortfolio","createNewPortfolio","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8ef5ffb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\n/**\r\n * A Bootstrap modal component that you can pass form fields as\r\n * properties. This is used for the creation of a new portfolio and a\r\n * stock.\r\n */\r\nexport default class CreationModal extends Component {\r\n    state = {\r\n        'values': {}\r\n    }\r\n\r\n    // Set's a new value to the state.\r\n    setValue(id, value) {\r\n        const values = this.state.values;\r\n        values[id] = value;\r\n        this.setState({'values': values});\r\n    }\r\n\r\n    // Validate inputs by using the validation properties passed to\r\n    // the component.\r\n    canSubmit() {\r\n        const sameLength = Object.keys(this.state.values).length === this.props.inputs.length;\r\n        if (sameLength) {\r\n            return this.props.inputs.some((inp) => inp.validate(this.state.values[inp.id]));\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" tabIndex=\"-1\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\">{this.props.title}</h5>\r\n                            <button type=\"button\" className=\"close\" onClick={this.props.close}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {this.props.inputs.map((inp) => <input\r\n                                key={inp.id}\r\n                                onChange={(e) => this.setValue(inp.id, e.target.value)}\r\n                                className=\"form-control stock-input\"\r\n                                placeholder={inp.helpText} />\r\n                            )}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-primary\"\r\n                                onClick={() => {\r\n                                    this.props.onCreate(this.state.values);\r\n                                    this.props.close();\r\n                                }}\r\n                                disabled={this.canSubmit()}>\r\n                                {this.props.submitName}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\n\r\n/**\r\n * A component which represents a single stock row in a portfolio.\r\n * The only functionality of the component is that it maintains it's\r\n * selected status.\r\n */\r\nexport default class Stock extends React.Component {\r\n    state = {\r\n        selected: false\r\n    }\r\n\r\n    render() {\r\n        const { props } = this;\r\n        return (\r\n            <div className=\"row stock-row\">\r\n                <div className=\"col\">\r\n                    <span>{props.stock.symbol}</span>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <span>{`${props.unitValue ? parseFloat(props.unitValue).toFixed(2) + ' $' : 'No value fetched'}`}</span>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <span>{props.stock.amount}</span>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <span>{`${(props.stock.amount * props.unitValue).toFixed(2)} $`}</span>\r\n                </div>\r\n                <div className=\"checkbox col\">\r\n                    <input type=\"checkbox\"\r\n                        onChange={(e) => this.setState({\r\n                            selected: !this.state.selected\r\n                        }, () => props.selectStock(props.stock, this.state.selected))}\r\n                        value={this.state.selected}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport CreationModal from './CreationModal.jsx';\r\nimport Stock from './Stock.jsx';\r\n\r\n\r\n/**\r\n * A Component which represents a portfolio in the application. The\r\n * portfolio is responsible for fetching the data for the stocks and\r\n * representing them in a table for the user.\r\n */\r\nexport default class Portfolio extends Component {\r\n    API_URL = \"https://www.alphavantage.co/query\";\r\n    API_KEY = \"RKZX2JYAYBAFV5S6\";\r\n    state = {\r\n        'showStockCreationModal': false,\r\n        'unitValues': {}\r\n    }\r\n\r\n    // If we have loaded a portfolio from the local storage, we must\r\n    // fetch the current stock values from the stock API.\r\n    componentDidMount() {\r\n        if (this.props.stocks.length) {\r\n            this.props.stocks.forEach((stock) => {\r\n                this.fetchStockValue(stock.symbol);\r\n            });\r\n        }\r\n    }\r\n\r\n    // Use the Alphavantage API to fetch current stock values. The API\r\n    // is limited to only 5 requests / minute for free users, which is\r\n    // why this fails if too many different stocks are added.\r\n    fetchStockValue(stockName) {\r\n        const data = fetch(this.API_URL + \"?function=GLOBAL_QUOTE&symbol=\" + stockName + \"&apikey=\" + this.API_KEY);\r\n        data.then((result) => {\r\n            result.json().then((resultData) => {\r\n                if (resultData[\"Global Quote\"]) {\r\n                    const unitValues = this.state.unitValues;\r\n                    unitValues[stockName] = resultData[\"Global Quote\"][\"05. price\"];\r\n                    this.setState({'unitValues': unitValues});\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"portfolio col-sm-12 col-md-6 px-2 mt-2\">\r\n                <div className=\"p-2 border border-dark\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <p className=\"font-weight-bold mx-2 mb-2\">{this.props.name}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <div className=\"stocks mb-3 mx-1\">\r\n                                <div className=\"row stock-header\">\r\n                                    <div className=\"col\">\r\n                                        <span>Symbol</span>\r\n                                    </div>\r\n                                    <div className=\"col\">\r\n                                        <span>Unit value</span>\r\n                                    </div>\r\n                                    <div className=\"col\">\r\n                                        <span>Quantity</span>\r\n                                    </div>\r\n                                    <div className=\"col\">\r\n                                        <span>Total value</span>\r\n                                    </div>\r\n                                    <div className=\"checkbox col\" />\r\n                                </div>\r\n                                {this.props.stocks.map((stock, i) => {\r\n                                    return <Stock\r\n                                        key={i} stock={stock}\r\n                                        unitValue={this.state.unitValues[stock.symbol]}\r\n                                        selectStock={(stock, selected) => this.props.selectStock(stock, this.props.id, selected)} />\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <button className=\"btn btn-primary btn-sm mobile-full-width\" \r\n                                    onClick={() => this.setState({'showStockCreationModal': true})}>\r\n                                Add stock\r\n                            </button>\r\n                            <button className=\"btn btn-lightdanger btn-sm float-right mobile-full-width\" onClick={this.props.deletePortfolio}>\r\n                                Delete a portfolio\r\n                            </button>\r\n                            <button className=\"btn btn-lightdanger btn-sm delete-button mobile-full-width float-right mr-sm-2\"\r\n                                onClick={this.props.deleteSelectedStocks}>\r\n                                Delete stocks\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {this.state.showStockCreationModal\r\n                    ? <CreationModal\r\n                        title=\"Create a new stock\"\r\n                        inputs={[{\r\n                            id: \"symbol\",\r\n                            helpText: \"Write the symbol of the stock...\",\r\n                            validate: (val) => val.length < 1\r\n                        }, {\r\n                            id: \"amount\",\r\n                            helpText: \"Write the amount of shares...\",\r\n                            validate: (val) => isNaN(parseInt(val, 10)) || parseInt(val, 10) <= 0\r\n                        }]}\r\n                        close={() => this.setState({'showStockCreationModal': false})}\r\n                        onCreate={(values) => {\r\n                            this.fetchStockValue(values.symbol);\r\n                            this.props.addStock(values);\r\n                        }}\r\n                        submitName={\"Add stock\"} />\r\n                    : null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Portfolio from './components/Portfolio';\r\nimport CreationModal from './components/CreationModal';\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        'portfolios': [],\r\n        'showCreationModal': false,\r\n        'selectedStocks': []\r\n    }\r\n\r\n    // Load data from local storage.\r\n    componentDidMount() {\r\n        const data = localStorage.getItem('data');\r\n        if (data) {\r\n            const jsonData = JSON.parse(data);\r\n            this.setState(jsonData)\r\n        }\r\n    }\r\n\r\n    // Create a new unique ID for a portfolio.\r\n    getNewPortolioId() {\r\n        let portfolioId = 0;\r\n        this.state.portfolios.forEach((port) => {\r\n            if (port.id >= portfolioId) {\r\n                portfolioId = port.id + 1\r\n            }\r\n        });\r\n\r\n        return portfolioId;\r\n    }\r\n\r\n    // Create a new unique ID for a stock in portfolio.\r\n    getNewStockId(stocks) {\r\n        let stockId = 0;\r\n        stocks.forEach((stock) => {\r\n            if (stock.id >= stockId) {\r\n                stockId = stock.id + 1\r\n            }\r\n        });\r\n\r\n        return stockId;\r\n    }\r\n\r\n    // Create a new portfolio, which can contain stocks.\r\n    createNewPortfolio(values) {\r\n        const portfolio = {\r\n            'name': values.name,\r\n            'id': this.getNewPortolioId(),\r\n            'stocks': []\r\n        };\r\n\r\n        this.setState({'portfolios': [...this.state.portfolios, portfolio]}, () => localStorage.setItem('data', JSON.stringify(this.state)));\r\n    }\r\n\r\n    // Add a stock to a portfolio.\r\n    addStockToPortfolio(values, id) {\r\n        const portfolios = this.state.portfolios.map((port) => {\r\n            if (port.id === id) {\r\n                if (port.stocks.filter((s) => s.symbol === values.symbol).length >= 50) {\r\n                    alert(\"Can't add more than 50 unique stocks to a portfolio\");\r\n                    return port;\r\n                }\r\n\r\n                values.id = this.getNewStockId(port.stocks);\r\n                port.stocks.push(values);\r\n            }\r\n\r\n            return port;\r\n        });\r\n\r\n        this.setState({'portfolios': portfolios}, () => localStorage.setItem('data', JSON.stringify(this.state)));\r\n    }\r\n\r\n    // Filter out the currently selected stocks to the state.\r\n    selectStock = (stock, portfolioId, selected) => {\r\n        let selectedStocks = this.state.selectedStocks;\r\n        if (selected) {\r\n            selectedStocks.push({\r\n                'stock': stock,\r\n                'portId': portfolioId\r\n            });\r\n        } else {\r\n            selectedStocks = selectedStocks.filter((s) => s.stock.id !== stock.id);\r\n        }\r\n\r\n        this.setState({selectedStocks});\r\n    }\r\n\r\n    // Delete the stocks according to the state's selected stocks array.\r\n    deleteSelectedStocks = () => {\r\n        let portfolios = this.state.portfolios;\r\n        this.state.selectedStocks.forEach((stock) => {\r\n            portfolios = portfolios.map((port) => {\r\n                if (port.id === stock.portId) {\r\n                    port.stocks = port.stocks.filter((p) => p.id !== stock.stock.id);\r\n                }\r\n\r\n                return port;\r\n            });\r\n        });\r\n\r\n        this.setState({portfolios, selectedStocks: []}, localStorage.setItem('data', JSON.stringify(this.state)));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <button className=\"btn btn-primary mt-2 mx-2 mb-0\"\r\n                                onClick={() => this.setState({'showCreationModal': true})}\r\n                                disabled={this.state.portfolios.length >= 10}>\r\n                            Add new portfolio\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row mx-0\">\r\n                    {this.state.portfolios.length\r\n                        ? this.state.portfolios.map((portfolio, index) => \r\n                            <Portfolio\r\n                                key={index}\r\n                                id={portfolio.id}\r\n                                name={portfolio.name}\r\n                                stocks={portfolio.stocks}\r\n                                deletePortfolio={() =>\r\n                                    this.setState({\r\n                                        'portfolios': this.state.portfolios.filter((port) => port.id !== portfolio.id)\r\n                                    }, () => localStorage.setItem('data', JSON.stringify(this.state)))}\r\n                                addStock={(values) => this.addStockToPortfolio(values, portfolio.id)}\r\n                                selectStock={this.selectStock}\r\n                                deleteSelectedStocks={this.deleteSelectedStocks}\r\n                            />\r\n                        )\r\n                        : <div className=\"col-12 px-2\">\r\n                            <p className=\"mx-1 my-2 text-white\">No portfolios made</p>\r\n                        </div>}\r\n                </div>\r\n                {this.state.showCreationModal\r\n                    ? <CreationModal\r\n                        title=\"Create a new portfolio\"\r\n                        inputs={[{\r\n                            id: \"name\",\r\n                            helpText: \"Write the name of the portfolio...\",\r\n                            validate: (val) => val.length < 4\r\n                        }]}\r\n                        close={() => this.setState({'showCreationModal': false})}\r\n                        onCreate={(values) => this.createNewPortfolio(values)}\r\n                        submitName={\"Create portfolio\"} />\r\n                    : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./bootstrap.min.css\";\nimport 'whatwg-fetch';\nimport 'promise-polyfill/src/polyfill';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}